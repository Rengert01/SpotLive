services:
  db:
    image: postgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_DB: ${POSTGRES_DB:?}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 60s
      retries: 5
    expose:
      - "${POSTGRES_PORT}"

  api:
    build:
      context: ./backend/
      dockerfile: Dockerfile.prod
      additional_contexts:
        assets: ./
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    environment:
      NODE_ENV: ${NODE_ENV:?}
      BACKEND_API_PORT: ${BACKEND_API_PORT:?}
      POSTGRES_DB: ${POSTGRES_DB:?}
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
      POSTGRES_PORT: ${POSTGRES_PORT:?}
      POSTGRES_HOST: ${POSTGRES_HOST:?}
      DB_LOGGING: ${DB_LOGGING:?}
      SESSION_SECRET: ${SESSION_SECRET:?}
    expose:
      - "${BACKEND_API_PORT}"
    deploy:
      mode: replicated
      replicas: 3
    command: npm run start

  web:
    build:
      context: ./frontend/
      dockerfile: Dockerfile.prod
    volumes:
      - ./frontend/src:/app/frontend/src
      - ./frontend/public:/app/frontend/public
      - ./frontend/package.json:/app/frontend/package.json
      - ./frontend/package-lock.json:/app/frontend/package-lock.json
    expose:
      - "${VITE_APP_PORT}"
    environment:
      VITE_APP_PORT: ${VITE_APP_PORT:?}
    deploy:
      mode: replicated
      replicas: 3
    command: npm run start

volumes:
  postgres-data: